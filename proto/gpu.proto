syntax = "proto3";

package gpu;

option go_package = "GPU-over-IP-AC922/proto;proto";

// Void 表示空请求或空响应
message Void {}

// GPUInfo 包含GPU的基本信息
message GPUInfo {
  string uuid = 1;        // GPU的唯一标识符
  string name = 2;        // GPU型号名称
  int64 totalMemory = 3;  // GPU总内存容量（MB）
}

// GPUList 包含多个GPUInfo的列表
message GPUList {
  repeated GPUInfo gpus = 1; // GPU信息列表
}

// GPURequest 包含针对特定GPU的请求参数
message GPURequest {
  string uuid = 1; // 目标GPU的UUID
}

// GPUStatus 包含GPU的当前使用状态
message GPUStatus {
  int64 usedMemory = 1;   // 已使用内存（MB）
  int32 utilization = 2;  // GPU利用率百分比（0-100）
}

// Ack 表示操作确认响应
message Ack {
  bool ok = 1;    // 操作是否成功
  string msg = 2; // 附加消息（如错误信息）
}

// RunRequest 包含在GPU上运行命令的请求参数
message RunRequest {
  string uuid = 1; // 目标GPU的UUID
  string cmd = 2;  // 要执行的命令
}

// RunResponse 包含命令执行结果
message RunResponse {
  int32 exitCode = 1; // 命令退出状态码
  string output = 2;  // 命令输出内容
}

// GPUService 定义GPU管理服务
service GPUService {
  // ListGPUs 获取系统中所有可用GPU的信息列表
  rpc ListGPUs(Void) returns (GPUList);
  
  // GetGPUStatus 获取指定GPU的当前使用状态
  rpc GetGPUStatus(GPURequest) returns (GPUStatus);
  
  // AcquireGPU 请求占用指定GPU资源
  rpc AcquireGPU(GPURequest) returns (Ack);
  
  // ReleaseGPU 释放已占用的GPU资源
  rpc ReleaseGPU(GPURequest) returns (Ack);
  
  // RunCommand 在指定GPU上运行命令
  rpc RunCommand(RunRequest) returns (RunResponse);
}
